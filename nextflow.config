
//check the code
/*
 * -------------------------------------------------
 *  nf-core/cirpipe Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  container = 'nfcore/cirpipe:latest' // Container slug. Stable releases should specify release tag!

  //choose the tools
  star = true
  bwa = true
  bowtie2 = true
  mapsplice = true
  segemehl = true
  find_circ = true
  circexplorer2 = true
  ciri = true

  //the necessary reference
  annotationfile = "/home/wqj/database/circleTest/1.genome/gencode.v25.annotation.chrX.gtf.GenePred.ref.txt"
  genomefile = "/home/wqj/database/circleTest/1.genome/chrX.fa"
  gtffile = "/home/wqj/database/circleTest/1.genome/gencode.v25.annotation.chrX.gtf"

  //reads files
  reads = "/home/wqj/database/test2/*{1,2}.fq.gz"

  //the indexes for tools
  starindex = '/home/wqj/test/starindex'
  segindex = "/home/wqj/test/segindex/chrX.idx"

  //the output directory
  outdir = '/home/wqj/test/temp'

  ciridir = '/home/wqj/tools/CIRI/bin/CIRI_v2.0.6'
  find_circdir = '/home/wqj/tools/find_circ'
  mapsdir = '/home/wqj/miniconda3/envs/tools_in_python3/bin'
  refdir = '/home/wqj/database/circleTest/1.genome'
  condadir = '/home/wqj/miniconda3/envs/tools_in_python3'
  conda2dir = '/home/wqj/miniconda3/envs/tools_in_python2'
  otherTools = '/home/wqj/test/cirPipe/otherTools'

  singleEnd = false

  cpu = 30

  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_dag.svg"
}

manifest {
  name = 'nf-core/cirpipe'
  author = 'Qi Zhao(zhaoqi@sysucc.org.cn), Qijin Wei(513848731@qq.com)'
  homePage = 'https://github.com/likelet/cirpipe'
  description = 'cirRNA analysis pipe'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

